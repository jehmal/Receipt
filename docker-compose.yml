version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: receipt_vault_db
    environment:
      POSTGRES_DB: receipt_vault
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - receipt_vault
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: receipt_vault_redis
    ports:
      - "6379:6379"
    networks:
      - receipt_vault
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: receipt_vault_es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - receipt_vault
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: receipt_vault_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - receipt_vault
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: receipt_vault_storage
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - receipt_vault
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: receipt_vault_backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/receipt_vault
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-development-jwt-secret-change-in-production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - CORS_ORIGIN=http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - receipt_vault
    restart: unless-stopped
    volumes:
      - uploads_data:/app/uploads
      - ./backend/logs:/app/logs

  # Frontend Web App
  frontend:
    build:
      context: ./mobile
      dockerfile: Dockerfile
    container_name: receipt_vault_frontend
    ports:
      - "8080:80"
    environment:
      - API_BASE_URL=http://localhost:3000
      - AUTH_BASE_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - receipt_vault
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: receipt_vault_proxy
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - receipt_vault
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
  redis_data:
  es_data:
  qdrant_data:
  minio_data:
  uploads_data:

networks:
  receipt_vault:
    driver: bridge
    name: receipt_vault_network 