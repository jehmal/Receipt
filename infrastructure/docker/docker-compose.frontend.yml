version: '3.8'

services:
  # Frontend - Flutter Web App
  frontend:
    build:
      context: ./mobile
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - API_BASE_URL=http://localhost:3000/api
      - AUTH_BASE_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - receipt-vault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend (assuming it's already configured)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/receipt_vault
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret
      - WORKOS_API_KEY=${WORKOS_API_KEY}
      - WORKOS_CLIENT_ID=${WORKOS_CLIENT_ID}
      - WORKOS_COOKIE_PASSWORD=${WORKOS_COOKIE_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - receipt-vault-network
    restart: unless-stopped
    volumes:
      - uploads_data:/app/uploads

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: receipt_vault
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - receipt-vault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - receipt-vault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - receipt-vault-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads_data:

networks:
  receipt-vault-network:
    driver: bridge