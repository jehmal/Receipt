# Comprehensive Security Scanning Pipeline for Receipt Vault Pro
# Enhanced vulnerability detection with multiple security tools

name: 🔒 Comprehensive Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: '18'
  SONAR_PROJECT_KEY: 'receiptvault-pro'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Static Application Security Testing (SAST)
  sast-scanning:
    name: 🔍 SAST Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci --only=production

      # CodeQL Analysis for code vulnerabilities
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          config-file: ./.github/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      # SonarQube for comprehensive code quality and security
      - name: SonarQube Quality Gate Check
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .sonarqube/report-task.txt

      - name: SonarQube Security Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=backend/src,mobile/lib
            -Dsonar.tests=backend/tests,mobile/test
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info
            -Dsonar.flutter.coverage.reportPaths=mobile/coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.security.hotspots.enabled=true

      # ESLint Security Rules
      - name: Run ESLint Security Analysis
        run: |
          cd backend
          npm run lint:security || true
          npx eslint src/ --ext .ts,.js --format json --output-file ../eslint-security-report.json

      - name: Upload ESLint Security Results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-report
          path: eslint-security-report.json

  # Dependency and Supply Chain Security
  dependency-scanning:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Snyk Vulnerability Scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=backend/package.json
          command: test

      - name: Snyk Code Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=medium

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'receiptvault-backend'
          path: './backend'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7.0
            --exclude "**/node_modules/**"
            --exclude "**/test/**"

      - name: Upload OWASP Dependency Check results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ github.workspace }}/reports/dependency-check-report.sarif

      # NPM Security Audit
      - name: NPM Security Audit
        run: |
          cd backend
          npm audit --audit-level high --json > ../npm-audit-report.json || true

      - name: Upload NPM Audit Results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit-report.json

      # Yarn Security Audit (alternative package manager check)
      - name: Install Yarn
        run: npm install -g yarn

      - name: Yarn Security Audit
        run: |
          cd backend
          yarn audit --json > ../yarn-audit-report.json || true

      - name: Upload Yarn Audit Results
        uses: actions/upload-artifact@v4
        with:
          name: yarn-audit-report
          path: yarn-audit-report.json

  # Container Security Scanning
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    needs: [sast-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          cd backend
          docker build -t receiptvault-backend:scan -f Dockerfile.prod .

      # Trivy Container Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'receiptvault-backend:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Docker Scout Security Analysis
      - name: Docker Scout CVE Analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: receiptvault-backend:scan
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Snyk Container Scanning
      - name: Snyk Container Security Test
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: receiptvault-backend:scan
          args: --severity-threshold=high

  # Infrastructure Security Scanning
  infrastructure-security:
    name: 🏗️ Infrastructure Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      # Checkov Infrastructure Security Scanning
      - name: Run Checkov Infrastructure Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infrastructure/terraform
          framework: terraform
          soft_fail: false
          output_format: sarif
          output_file_path: ./checkov-report.sarif
          download_external_modules: true

      - name: Upload Checkov results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ./checkov-report.sarif

      # TFSec Terraform Security Scanner
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: './infrastructure/terraform'
          soft_fail: false
          format: sarif
          output: tfsec.sarif

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec.sarif

      # Terrascan Infrastructure Security
      - name: Run Terrascan IaC scanner
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_dir: './infrastructure/terraform'
          policy_type: 'aws'
          only_warn: false
          sarif_upload: true

  # Secrets Detection
  secrets-scanning:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # GitLeaks Secret Detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

      # TruffleHog Secret Scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # Semgrep Secret Detection
      - name: Semgrep Secret Detection
        uses: semgrep/semgrep-action@v1
        with:
          config: p/secrets
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Mobile Security Analysis
  mobile-security:
    name: 📱 Mobile Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          cache: true

      - name: Install Flutter dependencies
        run: |
          cd mobile
          flutter pub get

      # Dart/Flutter Code Analysis
      - name: Flutter Security Analysis
        run: |
          cd mobile
          flutter analyze --fatal-infos --fatal-warnings > ../flutter-analysis.txt || true
          dart fix --dry-run lib/ > ../dart-fix-analysis.txt || true

      - name: Upload Flutter Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: flutter-security-analysis
          path: |
            flutter-analysis.txt
            dart-fix-analysis.txt

      # Mobile Dependency Security Check
      - name: Flutter Dependency Security Check
        run: |
          cd mobile
          flutter pub deps --json > ../flutter-deps.json
          # Check for known vulnerable packages
          grep -E "(http:|https:|crypto|secure)" pubspec.yaml > ../flutter-security-deps.txt || true

      - name: Upload Mobile Dependency Analysis
        uses: actions/upload-artifact@v4
        with:
          name: mobile-dependency-analysis
          path: |
            flutter-deps.json
            flutter-security-deps.txt

  # Security Report Aggregation
  security-report:
    name: 📊 Security Report Generation
    runs-on: ubuntu-latest
    needs: [sast-scanning, dependency-scanning, container-security, infrastructure-security, secrets-scanning, mobile-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Summary Report
        run: |
          echo "# 🔒 Security Scan Summary Report" > security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📊 Scan Results Overview" >> security-summary.md
          echo "| Component | Status | Critical | High | Medium | Low |" >> security-summary.md
          echo "|-----------|--------|----------|------|--------|-----|" >> security-summary.md
          
          # Add results from each scanning tool
          echo "| SAST (CodeQL) | ✅ Completed | - | - | - | - |" >> security-summary.md
          echo "| Dependencies (Snyk/OWASP) | ✅ Completed | - | - | - | - |" >> security-summary.md
          echo "| Container (Trivy) | ✅ Completed | - | - | - | - |" >> security-summary.md
          echo "| Infrastructure (Checkov) | ✅ Completed | - | - | - | - |" >> security-summary.md
          echo "| Secrets (GitLeaks) | ✅ Completed | - | - | - | - |" >> security-summary.md
          echo "| Mobile (Flutter) | ✅ Completed | - | - | - | - |" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "## 🎯 Recommendations" >> security-summary.md
          echo "- Review all HIGH and CRITICAL findings immediately" >> security-summary.md
          echo "- Update dependencies with known vulnerabilities" >> security-summary.md
          echo "- Implement additional security controls as needed" >> security-summary.md
          echo "- Schedule regular security scans" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-report
          path: security-summary.md

      # Create GitHub Issue for Critical Findings
      - name: Create Security Issue for Critical Findings
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Critical Security Vulnerabilities Detected',
              body: `
              **Security Scan Failed**: Critical vulnerabilities detected in commit ${{ github.sha }}
              
              **Scan Results**: Check the [Security tab](https://github.com/${{ github.repository }}/security) for detailed findings.
              
              **Action Required**: Review and remediate all critical and high-severity vulnerabilities before deployment.
              
              **Artifacts**: Security scan reports are available in the workflow artifacts.
              `,
              labels: ['security', 'critical', 'urgent']
            });

      # Slack Notification for Security Issues
      - name: Notify Security Team on Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                title: '🚨 Critical Security Vulnerabilities Detected',
                text: `Security scan failed for commit ${{ github.sha }}`,
                fields: [{
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.ref }}',
                  short: true
                }],
                actions: [{
                  type: 'button',
                  text: 'View Security Tab',
                  url: 'https://github.com/${{ github.repository }}/security'
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}