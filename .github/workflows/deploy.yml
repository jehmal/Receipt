# Enterprise CI/CD Pipeline for Receipt Vault Pro
# Security-first deployment with comprehensive testing and monitoring

name: üöÄ Deploy Receipt Vault Pro

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  # Security and Code Quality Analysis
  security-scan:
    name: üîí Security & Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run ESLint
        run: |
          cd backend
          npm run lint

      - name: Run security audit
        run: |
          cd backend
          npm audit --audit-level high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Infrastructure Security Scan
  infrastructure-scan:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          soft_fail: true
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # Build and Test
  build-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: receipt_vault_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run database migrations
        run: |
          cd backend
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/receipt_vault_test

      - name: Run unit tests
        run: |
          cd backend
          npm test -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/receipt_vault_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/receipt_vault_test
          REDIS_URL: redis://localhost:6379

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Build application
        run: |
          cd backend
          npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: backend/dist

  # Container Build and Security Scan
  container-build:
    name: üê≥ Container Build & Scan
    runs-on: ubuntu-latest
    needs: [build-test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-test:
    name: ‚ö° Performance Testing
    runs-on: ubuntu-latest
    needs: [container-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          cd backend/tests/performance
          k6 run --out cloud load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

  # Deploy to Development
  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [infrastructure-scan, container-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.receiptvault.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_DEV }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/dev/backend.hcl

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/dev/terraform.tfvars -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply tfplan

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --region us-west-2 --name receipt-vault-dev
          kubectl set image deployment/receipt-vault-backend app=${{ needs.container-build.outputs.image-tag }}
          kubectl rollout status deployment/receipt-vault-backend

  # Deploy to Staging
  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [infrastructure-scan, container-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.receiptvault.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/staging/backend.hcl

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/staging/terraform.tfvars -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply tfplan

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --region us-west-2 --name receipt-vault-staging
          kubectl set image deployment/receipt-vault-backend app=${{ needs.container-build.outputs.image-tag }}
          kubectl rollout status deployment/receipt-vault-backend

      - name: Run smoke tests
        run: |
          cd backend/tests/smoke
          npm ci
          npm run test:staging

  # Deploy to Production
  deploy-prod:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://receiptvault.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_PROD }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config=environments/prod/backend.hcl

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var-file=environments/prod/terraform.tfvars -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply tfplan

      - name: Blue-Green Deployment
        run: |
          aws eks update-kubeconfig --region us-west-2 --name receipt-vault-prod
          
          # Deploy to green environment
          kubectl apply -f k8s/manifests/green/
          kubectl set image deployment/receipt-vault-backend-green app=${{ needs.container-build.outputs.image-tag }}
          kubectl rollout status deployment/receipt-vault-backend-green
          
          # Run health checks
          kubectl wait --for=condition=ready pod -l app=receipt-vault-backend-green --timeout=300s
          
          # Switch traffic to green
          kubectl patch service receipt-vault-backend -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Monitor for 5 minutes
          sleep 300
          
          # Scale down blue if successful
          kubectl scale deployment receipt-vault-backend-blue --replicas=0

      - name: Post-deployment monitoring
        run: |
          # Check application health
          curl -f https://receiptvault.com/health
          
          # Check key metrics
          echo "Deployment completed successfully"

  # Notification
  notify:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}