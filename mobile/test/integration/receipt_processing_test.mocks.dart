// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_vault/test/integration/receipt_processing_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_vault/core/network/api_client.dart' as _i4;
import 'package:receipt_vault/core/storage/local_storage.dart' as _i6;
import 'package:receipt_vault/core/sync/sync_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncResult_1 extends _i1.SmartFake implements _i3.SyncResult {
  _FakeSyncResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncStatus_2 extends _i1.SmartFake implements _i3.SyncStatus {
  _FakeSyncStatus_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i2.Response<dynamic>> post(
    String? path,
    dynamic data, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            path,
            data,
          ],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [
              path,
              data,
            ],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i2.Response<dynamic>> put(
    String? path,
    dynamic data, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            path,
            data,
          ],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #put,
            [
              path,
              data,
            ],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i2.Response<dynamic>> delete(
    String? path, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<dynamic>>);

  @override
  _i5.Future<_i2.Response<dynamic>> uploadFile(
    String? path,
    String? filePath, {
    String? fileKey = r'file',
    Map<String, dynamic>? data,
    _i2.ProgressCallback? onSendProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            path,
            filePath,
          ],
          {
            #fileKey: fileKey,
            #data: data,
            #onSendProgress: onSendProgress,
          },
        ),
        returnValue:
            _i5.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #uploadFile,
            [
              path,
              filePath,
            ],
            {
              #fileKey: fileKey,
              #data: data,
              #onSendProgress: onSendProgress,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i6.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i3.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void startPeriodicSync() => super.noSuchMethod(
        Invocation.method(
          #startPeriodicSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopPeriodicSync() => super.noSuchMethod(
        Invocation.method(
          #stopPeriodicSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.SyncResult> syncNow() => (super.noSuchMethod(
        Invocation.method(
          #syncNow,
          [],
        ),
        returnValue: _i5.Future<_i3.SyncResult>.value(_FakeSyncResult_1(
          this,
          Invocation.method(
            #syncNow,
            [],
          ),
        )),
      ) as _i5.Future<_i3.SyncResult>);

  @override
  _i5.Future<_i3.SyncResult> syncPendingActions() => (super.noSuchMethod(
        Invocation.method(
          #syncPendingActions,
          [],
        ),
        returnValue: _i5.Future<_i3.SyncResult>.value(_FakeSyncResult_1(
          this,
          Invocation.method(
            #syncPendingActions,
            [],
          ),
        )),
      ) as _i5.Future<_i3.SyncResult>);

  @override
  _i5.Future<void> queueForSync({
    required String? action,
    required String? entityType,
    String? entityId,
    required Map<String, dynamic>? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueForSync,
          [],
          {
            #action: action,
            #entityType: entityType,
            #entityId: entityId,
            #payload: payload,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.SyncStatus> getSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #getSyncStatus,
          [],
        ),
        returnValue: _i5.Future<_i3.SyncStatus>.value(_FakeSyncStatus_2(
          this,
          Invocation.method(
            #getSyncStatus,
            [],
          ),
        )),
      ) as _i5.Future<_i3.SyncStatus>);

  @override
  _i5.Future<void> clearSyncQueue() => (super.noSuchMethod(
        Invocation.method(
          #clearSyncQueue,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
